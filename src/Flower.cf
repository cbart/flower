--  Copyright (C) 2011 Cezary Bartoszuk
--  cbart@students.mimuw.edu.pl

--  This program is free software; you can redistribute it and/or modify
--  it under the terms of the GNU General Public License as published by
--  the Free Software Foundation; either version 2 of the License, or
--  (at your option) any later version.

--  This program is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU General Public License for more details.

entrypoints Program ;

-- Program

Program .   Program ::= [AbstractDeclaration] ;

-- Declarations

-- ADFor   . AbstractDeclaration ::= Quantifier Declaration ;
ADLet   . AbstractDeclaration   ::= Declaration ;
(:[])   . [AbstractDeclaration] ::= AbstractDeclaration ;
(:)     . [AbstractDeclaration] ::= AbstractDeclaration [AbstractDeclaration] ;
-- QForAll . Quantifier  ::= "for" [Bound] ;
DLet    . Declaration ::= "let" Ident ":" Type "=" Expr ";;" ;

-- Expressions

-- ExprLoop    . Expr1 ::= "loop" ;
-- ExprFun     . Expr1 ::= "fun" [Arg] "->" Expr "end" ;
ExprIf      . Expr1 ::= "if" Expr "then" Expr "else" Expr "end" ;
-- ExprApp     . Expr ::= Expr Expr1 ;
ExprId      . Expr1 ::= Ident ;
ExprConst   . Expr1 ::= Constant ;
coercions Expr 1 ;

-- Floating Point Constants

-- ConstSci    . Constant  ::= CSci ;
-- ConstFix    . Constant  ::= CFix ;

-- position token CSci digit '.' digit+ 'e' ('+' | '-') digit+ ;
-- position token CFix (digit+ '.' digit+) | (digit+ '.') | ('.' digit+) ;

-- Integer Constants

-- ConstHex    . Constant  ::= CHex ;
-- ConstDec    . Constant  ::= CDec ;
-- ConstOct    . Constant  ::= COct ;
-- ConstBin    . Constant  ::= CBin ;
ConstInt    . Constant  ::= CInt ;
-- ConstStrCh  . Constant  ::= String ;
-- ConstChar   . Constant  ::= Char ;

-- position token CHex ('0' 'x' ["0123456789abcdef"]+) ;
-- position token CDec ('0' 'd' digit+) ;
-- position token COct ('0' 'o' ["01234567"]+) ;
-- position token CBin ('0' 'b' ["01"]+) ;
position token CInt (digit+) ;

-- Arguments

-- ArgId   . Arg ::= Ident ;
-- (:[])   . [Arg] ::= Arg ;
-- (:)     . [Arg] ::= Arg [Arg] ;

-- Types

-- TypeFun . Type ::= Type1 "->" Type ;
-- TypeApp . Type1 ::= Type1 Type2 ;
TypeId  . Type2 ::= Ident ;
coercions Type 2 ;

-- Kinds

-- KindFun . Kind ::= Kind1 "->" Kind ;
-- KindAst . Kind1 ::= "*" ;
-- coercions Kind 1 ;

-- Type bounds

-- Bound   . Bound ::= Ident ":" Kind ;
-- (:[])   . [Bound] ::= Bound ;
-- (:)     . [Bound] ::= Bound "," [Bound] ;

-- Comments

comment "#" ;
comment "(#" "#)" ;
